{
	"name": "dataflowDimMovie",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AzureSqlTableTMovies",
						"type": "DatasetReference"
					},
					"name": "movies"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTabletMovieStatus",
						"type": "DatasetReference"
					},
					"name": "MovieStatus"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTableDimMovie",
						"type": "DatasetReference"
					},
					"name": "sourceSinkForCheck"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlTableDimMovie",
						"type": "DatasetReference"
					},
					"name": "sinkDataMart"
				}
			],
			"transformations": [
				{
					"name": "AddNewColumns"
				},
				{
					"name": "selectMovies"
				},
				{
					"name": "selectMovieStatus"
				},
				{
					"name": "joinMovieVSMovieStatus"
				},
				{
					"name": "selectAfterJoin"
				},
				{
					"name": "AlterRow"
				},
				{
					"name": "exists"
				}
			],
			"scriptLines": [
				"source(output(",
				"          MovieId as integer,",
				"          MovieIdNK as integer,",
				"          Budget as integer,",
				"          HomepagePath as string,",
				"          Title as string,",
				"          OriginalTitle as string,",
				"          ReleaseDate as date,",
				"          Revenue as long,",
				"          Runtime as integer,",
				"          MovieStatusId as integer,",
				"          AvgVote as decimal(3,1),",
				"          CreatedDate as timestamp,",
				"          ModifiedDate as timestamp,",
				"          SrcFileName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> movies",
				"source(output(",
				"          MovieStatusId as integer,",
				"          MovieStatusName as string,",
				"          CreatedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> MovieStatus",
				"source(output(",
				"          MovieKey as integer,",
				"          MovieIdNK as integer,",
				"          Title as string,",
				"          ReleaseDate as date,",
				"          Runtime as integer,",
				"          MovieStatus as string,",
				"          CreatedDate as timestamp,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> sourceSinkForCheck",
				"joinMovieVSMovieStatus derive(CreatedDate = currentTimestamp(),",
				"          ModifiedDate = currentTimestamp()) ~> AddNewColumns",
				"movies select(mapColumn(",
				"          MovieIdNK,",
				"          Title,",
				"          ReleaseDate,",
				"          Runtime,",
				"          MovieStatusId",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectMovies",
				"MovieStatus select(mapColumn(",
				"          MovieStatusName,",
				"          MovieStatusId",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectMovieStatus",
				"selectMovies, selectMovieStatus join(selectMovies@MovieStatusId == selectMovieStatus@MovieStatusId,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinMovieVSMovieStatus",
				"AddNewColumns select(mapColumn(",
				"          MovieIdNK,",
				"          Title,",
				"          ReleaseDate,",
				"          Runtime,",
				"          MovieStatus = MovieStatusName,",
				"          CreatedDate,",
				"          ModifiedDate",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectAfterJoin",
				"exists alterRow(insertIf(true()),",
				"     updateIf(true())) ~> AlterRow",
				"selectAfterJoin, sourceSinkForCheck exists(selectAfterJoin@MovieIdNK == sourceSinkForCheck@MovieIdNK,",
				"     negate:true,",
				"     broadcast: 'auto')~> exists",
				"AlterRow sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          MovieKey as integer,",
				"          MovieIdNK as integer,",
				"          Title as string,",
				"          ReleaseDate as date,",
				"          Runtime as integer,",
				"          MovieStatus as string,",
				"          CreatedDate as timestamp,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          MovieIdNK,",
				"          Title,",
				"          ReleaseDate,",
				"          Runtime,",
				"          MovieStatus,",
				"          CreatedDate,",
				"          ModifiedDate",
				"     )) ~> sinkDataMart"
			]
		}
	}
}